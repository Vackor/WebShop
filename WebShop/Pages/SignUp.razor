@* Sign up page *@

@page "/signup"
@inject NavigationManager NavManager

<PageTitle>Sign Up</PageTitle>

@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers

@* Form to fill with user data that can be validated*@
<EditForm Model="myModel" OnValidSubmit="Success">
    <DataAnnotationsValidator />

    <div align="center">

        @* Label *@
        <MatH1>
            Create an account
        </MatH1>

        @* Input fields *@
        <p>
            <MatTextField Label="Username" @bind-Value="myModel.Username" />
            <ValidationMessage For="@(() => myModel.Username)" />
        </p>
        <p>
            <MatTextField Label="Password" @bind-Value="myModel.Password" Type="password" />
            <ValidationMessage For="@(() => myModel.Password)" />
        </p>
        <p>
            <MatDatePicker Label="Date of Birth" @bind-Value="myModel.DateOfBirth" />
            <ValidationMessage For="@(() => myModel.DateOfBirth)" />
        </p>
        <p>
            <MatSelect Label="Gender" @bind-Value="myModel.Gender">
                <MatOptionString Value="Male">Male</MatOptionString>
                <MatOptionString Value="Female">Female</MatOptionString>
            </MatSelect>
            <ValidationMessage For="@(() => myModel.Gender)" />
        </p>

        @* Submit button *@
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
            <MatButton Type="submit" Raised="true">Sign up</MatButton>
            <MatButton Raised="true" OnClick="Reset">Reset</MatButton>
        </div>

    </div>

</EditForm>
 
@code {
    [Inject]
    IJSRuntime JS { get; set; }

    // Alert if signing up was successful 
    async Task Success() =>
        await JS.InvokeAsync<object>("alert", "Now you can log in!");


    // Modell class for input values
    public class SignUpModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [MinLength(8)]
        public string Password { get; set; }

        [Required]
        public string Gender { get; set; }

        [Required]
        [CustomValidation(typeof(SignUpModel), nameof(RequiredDateTime))]
        public DateTime DateOfBirth { get; set; }

        // validation
        public static ValidationResult RequiredDateTime(DateTime value, ValidationContext vc)
        {
            return value > DateTime.MinValue && value <= DateTime.Today
                ? ValidationResult.Success
                : new ValidationResult($"The {vc.MemberName} field is required and cannot be later than today.", new[] { vc.MemberName });
        }
    }

}
